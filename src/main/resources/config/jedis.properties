
#jedis 实例化方式 : JavaSentinel , ServerSentinel , Agent, Cluster.
use.way.code=Agent

#是否开启java版哨兵，保证集群的高可用.. ture/false
#开启此哨兵,redis 服务端必须配置主从，master.address 配置 主节点连接信息。
java.sentinel.open.status=false

#serverSentinel  config 
redis.sentinel.host1=47.93.9.60:26379
redis.sentinel.host2=47.93.11.16:26379
redis.sentinel.master.name=mymaster
redis.sentinel.master.address=127.0.0.1:6379
#密码      PS: 不管集群还是代理，密码统一
redis.auth.password=Four2BelttwoKings

#agentAddress : 127.0.0.1:6379;127.0.0.1:6380;127.0.0.1:6381
jedis.agent.address=127.0.0.1:6379

#######
#redisCluster 多主多从，集群部署切记交叉部署。
jedis.cluster.nodes=120.79.246.84:7001;120.79.246.84:7002;39.107.238.171:7001;39.107.238.171:7002;39.107.234.231:7002
#连接超时时间
jedis.cluster.connection.timeout=3000

#设置网络通信超时时间 
jedis.cluster.so.timeout=3000

#设置最大重试次数
jedis.cluster.max.attempts=10


#生成有序的id 对应的redis String 的 key
id.generator.redis.string.id.key=Wj
id.generator.redis.string.id.value=1000
id.generator.redis.string.user.key=wj:users:id
id.generator.redis.string.hospital.key=wj:hospitals:id
id.generator.redis.string.push.key=wj:push:id
id.generator.redis.string.sterilization.key=wj:sterilization:id

#redis订单id 生成
id.generator.redis.master.ip=127.0.0.1
id.generator.redis.master.port=6379
id.generator.redis.master.password=WJtest

##JedisPoolConfig
jedis.config.maxTotal=500
#<!-- 最大空闲连接数 -->
jedis.config.maxIdle=10
jedis.config.maxWaitMillis=60000
#在将连接放回池中前，自动检验连接是否有效  
jedis.config.testOnReturn=true
#在borrow（借用）一个jedis实例时，是否提前进行validate(验证)操作，如果为true，则得到的jedis实例都是可用的
jedis.config.testOnBorrow=true


#<!-- 每次释放连接的最大数目 -->
jedis.config.numTestsPerEvictionRun=10
#<!-- 连接最小空闲时间 -->
jedis.config.minEvictableIdleTimeMillis=100
#<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
jedis.config.softMinEvictableIdleTimeMillis=100
#<!-- 释放连接的扫描间隔（毫秒） -->
jedis.config.timeBetweenEvictionRunsMillis=10
#<!-- 在空闲时检查有效性, 默认false -->
jedis.config.testWhileIdle=true
#<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
jedis.config.blockWhenExhausted=false





